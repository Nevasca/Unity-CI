name: Game Actions ðŸŽ®

env:
  project_name: UnityCI
  unity_version: 2021.3.1f1

on:   
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
      
  workflow_dispatch:

jobs:  
  testAllModes:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - Playmode
          - Editmode
    steps:      
      - name: Checkout repository
        uses: actions/checkout@v2        
      
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      
      - name: Cache Library folder
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      
      - name: Run test
        uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          # coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      
      - name: Upload test artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      # - uses: actions/upload-artifact@v2
      #  if: always()
      #  with:
      #    name: Coverage results for ${{ matrix.testMode }}
      #    path: ${{ steps.tests.outputs.coveragePath }}
    
  buildForAllSupportedPlatforms:
    needs: testAllModes
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          # - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}      
    steps:      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Cache Library folder
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      
      - name: Run build
        uses: game-ci/unity-builder@v2
        id: build
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ env.unity_version }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.project_name }}
          versioning: Semantic
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          
  deployToItchio:
    needs: buildForAllSupportedPlatforms
    name: Deploy to itch.io for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:        
        targetPlatform:          
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
                  
      - name: Upload to itch.io
        uses: robpc/itchio-upload-action@v1
        with:
          path: build/${{ matrix.targetPlatform }}
          project: ${{ secrets.ITCHIO_PROJECT_NAME }}
          channel: ${{ matrix.targetPlatform }}
          version: v${{ needs.buildForAllSupportedPlatforms.outputs.buildVersion }}
          api-key: ${{ secrets.ITCHIO_API_KEY }}
    
      
        
    
